@page "/driver/{DriverId}/{nascarDriverId}"
@inject NASCAR_Money.Helpers.IDriversHelper DriversHelper
@inject NASCAR_Money.Services.IDriverService DriverService
@using NASCAR_Money.Models
@using NASCAR_Money.DbModels
@using MudBlazor
<style>
    .driverImages {
        width: 120px;
        height: auto;
    }
</style>
@if(driverData == null && recentFinishes == null)
{
    <p><em>Loading...</em></p>
}
else
{
<MudContainer>
    <MudGrid>
        <MudItem xs="12" sm="12">
            <MudCard>     
                <MudCardContent>
                    <img src="@driverData.Firesuit_Image" alt="Driver Image" class="driverImages" />
                    <img src="@driverData.Badge_Image" alt="Driver Badge" class="driverImages" />
                    <img src="@driverData.Manufacturer" alt="Manufacturer" class="driverImages" />

                    <MudText Typo="Typo.h5">@driverData.Full_Name</MudText>
                    <MudText Typo="Typo.body1">@driverData.Team</MudText>
                    <MudText Typo="Typo.body1">@driverData.Hometown_City, @driverData.Hometown_State</MudText>
                    <MudText Typo="Typo.body1">@driverData.Twitter_Handle add link</MudText>
                    <MudText Typo="Typo.body1">Crew Chief @driverData.Crew_Chief add rr link</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>


    @foreach (var year in recentFinishes.Select(r => r.RaceSeason).OrderByDescending(r => r.Value).Distinct())
    {
        @foreach (var series in recentFinishes.Select(r => r.SeriesId).OrderBy(r => r.Value).Distinct())
        {
            <div style="padding-top: 5%">
                <MudDataGrid Items="@recentFinishes.Where(r => r.RaceSeason == year && r.SeriesId == series)">
                    <ToolBarContent>
                        <MudText Typo="Typo.h3">@year  |</MudText>
                        @if (series == 1)
                        {
                            <img src="https://www.nascar.com/wp-content/uploads/sites/7/2023/05/10/nascar_cup_series_logo.svg" alt="Cup Logo" style="width: 10%; height: auto;" />
                        }
                        else if (series == 2)
                        {
                            <img src="https://www.nascar.com/wp-content/uploads/sites/7/2023/05/10/nascar_xfinity_series_logos-1.svg" alt="Xfinity Logo" style="width: 10%; height: auto;" />
                        }
                        else
                        {
                            <img src="https://www.nascar.com/wp-content/uploads/sites/7/2023/05/10/nascar_craftsman_truck_series_logo.svg" alt="Truck Logo" style="width: 10%; height: auto;" />
                        }
                    </ToolBarContent>
                    <Columns>
                        <PropertyColumn Property="x => x.RaceSeason" Title="Season" />
                        <PropertyColumn Property="x => x.RaceName" Title="Race" />
                        <PropertyColumn Property="x => x.TrackName" Title="Track" />
                        <PropertyColumn Property="x => x.StartPosition" Title="Start" />
                        <PropertyColumn Property="x => x.AveragePosition" Title="Avg Position" />
                        <PropertyColumn Property="x => x.EndPosition" Title="Finish" />
                        <PropertyColumn Property="x => x.LeadLaps" Title="Lead Laps" />
                        <PropertyColumn Property="x => x.FastLaps" Title="Fast Laps" />
                        <PropertyColumn Property="x => x.Rating" Title="Rating" />
                    </Columns>
                </MudDataGrid>
            </div> 
        }
    }
}


@code {
    [Parameter]
    public string DriverId { get; set; }
    [Parameter]
    public string NascarDriverId { get; set; }

    private int driverIdAsInt;
    private int nascarDriverIdAsInt;

    private DriverData driverData;
    private List<DriverResult> recentFinishes;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(DriverId))
        {
            driverIdAsInt = Int32.Parse(DriverId);
        }
        if (!string.IsNullOrEmpty(NascarDriverId))
        {
            nascarDriverIdAsInt = Int32.Parse(NascarDriverId);
        }
        driverData = await DriversHelper.GetDriverById(driverIdAsInt);

        recentFinishes = await DriverService.DriverPage(nascarDriverIdAsInt);
    }
}

