@page "/racecenter/{year:int}/{seriesId:int}/{raceId:int}"

@inject NASCAR_Money.Services.IRaceCenterService RaceCenterService
@inject NASCAR_Money.Data.NascarCache.ICacheService CacheService
@inject NASCAR_Money.Services.IDriverService DriverService
@inject NASCAR_Money.Services.ThemeService ThemeService
@inject NavigationManager NavigationManager
@using NASCAR_Money.Models.ViewModels;
@using NASCAR_Money.Models;


@if(raceCenterViewModel == null)
{
    <h2> loading...</h2>
}
else
{
    <style>
    body {
        background: url("@raceCenterViewModel.scheduleCombinedFeed.Track_Background_Image_URL") no-repeat center center fixed;
        -webkit-background-size: cover;
        -moz-background-size: cover;
        -o-background-size: cover;
        background-size: cover;
    }
</style>

    <MudGrid>
    <MudItem xs="12">
        <MudPaper Elevation="5" Class="d-flex align-center justify-center mud-width-full py-8">
            <MudGrid>
                    <MudItem xs="2" Class="d-flex align-items-center justify-content-center">
                    <MudButton Variant="Variant.Filled" OnClick="() => NavigateToRaceCenter(year, seriesId, previousRaceId)">Previous Race</MudButton>
                </MudItem>
                <MudItem xs="8" Class="d-flex align-items-center justify-content-center">
                    <img src="@raceCenterViewModel.scheduleCombinedFeed.Race_Logo_Medium" style="height: 80px; width: auto; padding-right: 2%" />
                    <div class="text-center">
                        <h1 style="font-weight:bold">@raceCenterViewModel.weekendFeed.weekend_race.FirstOrDefault().race_name</h1>
                            <h6>@raceCenterViewModel.weekendFeed.weekend_race.FirstOrDefault().date_scheduled.ToString("dddd, MMMM dd, yyyy | hh:mm tt")</h6>
                            <h6>@raceCenterViewModel.scheduleCombinedFeed.Race_TV</h6>
                        </div>
                    <img src="@raceCenterViewModel.scheduleCombinedFeed.Series_Logo" style="height: 80px; width: auto; padding-left: 2%" />
                </MudItem>
                    <MudItem xs="2" Class="d-flex align-items-center justify-content-center">
                        <MudButton Variant="Variant.Filled" OnClick="() => NavigateToRaceCenter(year, seriesId, nextRaceId)">Next Race</MudButton>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="8">
            <MudPaper Elevation="5" Class="d-flex align-center justify-center mud-width-full py-8" Style="padding: 20px;">
                <MudGrid>
                    <MudItem xs="12" Class="d-flex align-center justify-center">
                        <h2>@raceCenterViewModel.weekendFeed.weekend_race.FirstOrDefault().race_name | @raceCenterViewModel.weekendFeed.weekend_race.FirstOrDefault().track_name</h2>
                    </MudItem>
                    <MudItem xs="3" Class="d-flex align-center justify-center">
                        <img src="@raceCenterViewModel.trackInfo.TrackLogo" style="height:auto; width:200px" />
                    </MudItem>
                    <MudItem xs="3" Class="d-flex align-center justify-center">
                        <img src="@raceCenterViewModel.scheduleCombinedFeed.Race_Logo_Medium" style="height:auto; width:200px" />
                    </MudItem>
                    <MudItem xs="3" Class="d-flex align-center justify-center">
                        <img src="@raceCenterViewModel.trackInfo.TrackImageThumbnail" style="height:auto; width:200px" />
                    </MudItem>
                    <MudItem xs="3" Class="d-flex align-center justify-center">
                        <img src="@raceCenterViewModel.scheduleCombinedFeed.Race_TV_Logo" style="height:auto; width:200px" />
                    </MudItem>
                    <MudItem xs="4" Class="d-flex align-center justify-center">
                        <div style="max-height: 320px; overflow-y: auto;">
                        <MudList>
                            <MudListItem Avatar="@Icons.Material.Filled.Category">
                                @raceCenterViewModel.trackInfo.TrackType
                            </MudListItem>
                            <MudListItem Avatar="@Icons.Material.Filled.Straighten">
                                @raceCenterViewModel.trackInfo.Length Miles
                            </MudListItem>
                            <MudListItem Avatar="@Icons.Material.Filled.Construction">
                                @raceCenterViewModel.trackInfo.TrackSurface
                            </MudListItem>
                            <MudListItem Avatar="@Icons.Material.Filled.SquareFoot">
                                @raceCenterViewModel.trackInfo.TrackBanking
                            </MudListItem>
                            <MudListItem Avatar="@Icons.Material.Filled.Info">
                                @raceCenterViewModel.trackInfo.TrackDescription
                            </MudListItem>
                        </MudList>
                        </div>
                    </MudItem>
                    <MudItem xs="4">
                        @if (raceCenterViewModel.weekendFeed.weekend_race.FirstOrDefault().date_scheduled > DateTime.UtcNow)
                        {
                            <MudCard>
                            <MudCardHeader Class="center-images">
                                <MudImage ObjectPosition="ObjectPosition.Top" Src="@raceCenterViewModel.scheduleCombinedFeed.Previous_Winner_Firesuit" Height="180" />
                                <MudImage ObjectPosition="ObjectPosition.Top" Src="@raceCenterViewModel.scheduleCombinedFeed.Previous_Winner_Badge" Height="110" />
                            </MudCardHeader>
                            <MudCardContent>
                                <MudText Typo="Typo.h5">Previous Winner</MudText>
                                <MudText Typo="Typo.body2">@raceCenterViewModel.scheduleCombinedFeed.Previous_Winner_Name</MudText>
                            </MudCardContent>
                            </MudCard>
                        }
                        else
                        {
                            <MudCard>
                                <MudCardHeader Class="center-images">
                                    <MudImage ObjectPosition="ObjectPosition.Top" Src="@raceCenterViewModel.scheduleCombinedFeed.Current_Winner_Firesuit" Height="180" />
                                    <MudImage ObjectPosition="ObjectPosition.Top" Src="@raceCenterViewModel.scheduleCombinedFeed.Current_Winner_Badge" Height="110" />
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudText Typo="Typo.h5">Race Winner</MudText>
                                    <MudText Typo="Typo.body2">@raceCenterViewModel.scheduleCombinedFeed.Current_Winner_Name</MudText>
                                </MudCardContent>
                            </MudCard>
                        }

                    </MudItem>
                    <MudItem xs="4">
                        <MudStack>
                            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.DataExploration" Color="Color.Error">Previous Race Loop Stats</MudButton>
                            <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.DashboardCustomize" Color="Color.Primary">Data Dashboard</MudButton>
                            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Stadium" Color="Color.Warning">Track Data</MudButton>
                        </MudStack>
                    </MudItem>
                </MudGrid>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="4">
                @if (seriesId == 1)
                {
                    <MudDataGrid Items="@raceCenterViewModel.raceListBasic.series_1.Where(x => x.race_id == raceId).SelectMany(x => x.schedule)" Virtualize="true" Dense="true" FixedHeader="true" Height="500px">
                        <ToolBarContent>
                            <MudText Typo="Typo.h6">Weekend Schedule</MudText>
                        </ToolBarContent>
                        <Columns>
                            <PropertyColumn Property="x => x.event_name" Title="Event" CellStyleFunc="@_cellStyleFunc" />
                            <PropertyColumn Property="x => x.start_time_utc" Title="Time" />
                        </Columns>
                    </MudDataGrid>
                }
                else if (seriesId == 2)
                {
                <MudDataGrid Items="@raceCenterViewModel.raceListBasic.series_2.Where(x => x.race_id == raceId).SelectMany(x => x.schedule)" Virtualize="true" Dense="true" FixedHeader="true" Height="500px">
                        <ToolBarContent>
                            <MudText Typo="Typo.h6">Weekend Schedule</MudText>
                        </ToolBarContent>
                        <Columns>
                            <PropertyColumn Property="x => x.event_name" Title="Event" CellStyleFunc="@_cellStyleFunc" />
                            <PropertyColumn Property="x => x.start_time_utc" Title="Time" />
                        </Columns>
                    </MudDataGrid>
                }
                else if (seriesId == 3)
                {
                <MudDataGrid Items="@raceCenterViewModel.raceListBasic.series_3.Where(x => x.race_id == raceId).SelectMany(x => x.schedule)" Virtualize="true" Dense="true" FixedHeader="true" Height="500px">
                        <ToolBarContent>
                            <MudText Typo="Typo.h6">Weekend Schedule</MudText>
                        </ToolBarContent>
                        <Columns>
                            <PropertyColumn Property="x => x.event_name" Title="Event" CellStyleFunc="@_cellStyleFunc" />
                            <PropertyColumn Property="x => x.start_time_utc" Title="Time" />
                        </Columns>
                    </MudDataGrid>
                }
                

    </MudItem>

        @if (raceCenterViewModel.weekendFeed.weekend_runs.Where(x => x.run_type == 2).SelectMany(x => x.results).Count() < 1 || raceCenterViewModel.weekendFeed.weekend_runs.Where(x => x.run_type == 2).SelectMany(x => x.results).Count() == null)
        {
            <MudItem xs="12" sm="4">
                <MudPaper Elevation="5" Class="d-flex align-center justify-center mud-width-full py-8">
                    Qualifying Starts: @qualifyingTime
                </MudPaper>
            </MudItem>
        }
        else
        {
            <MudItem xs="12" sm="4">
            <MudDataGrid Items="@raceCenterViewModel.weekendFeed.weekend_runs.Where(x => x.run_type == 2).SelectMany(x => x.results)" Virtualize="true" Striped="true" FixedHeader="true" Height="500px">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Qualifying Results</MudText>
                </ToolBarContent>
                <Columns>
                    <PropertyColumn Property="x => x.driver_name" Title="Driver" />
                    <PropertyColumn Property="x => x.finishing_position" Title="Start"/>
                    <PropertyColumn Property="x => x.delta_leader" Title="Behind"/>
                </Columns>
            </MudDataGrid>
                
        </MudItem>
        }
        
        @if (lapAverages == null)
        {
            <MudItem xs="12" sm="8">
                <MudPaper Elevation="5" Class="d-flex align-center justify-center mud-width-full py-8">Practice Starts: @practiceTime</MudPaper>
            </MudItem>
        }
        else
        {
            <MudItem xs="12" sm="8">
                <MudDataGrid Items="lapAverages.Items" Virtualize="true" FixedHeader="true" Height="500px" Striped="true" Dense="true">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Practice Averages</MudText>
                    <MudSpacer />
                        <MudSwitch @bind-Checked="@colorFilterForLapAvgs" Color="Color.Primary">Color Filter</MudSwitch>
                </ToolBarContent>
                <Columns>
                    <PropertyColumn Property="x => x.Driver" Title="Driver" />
                    <PropertyColumn Property="x => Math.Round(x.OverAllAvg, 2)" Title="Overall Avg" />
                        <PropertyColumn Property="x => x.OverAllAvgRank" Title="Overall Rank" CellStyleFunc="GetCellStyleFuncLapAvgs(v => v.OverAllAvgRank, 1, 40, true)" />
                        <PropertyColumn Property="x => x.Con5LapRank" Title="5 lap" CellStyleFunc="GetCellStyleFuncLapAvgs(v => v.Con5LapRank, 1, 40, true)" />
                    <PropertyColumn Property="x => x.Con10LapRank" Title="10 lap"  CellStyleFunc="GetCellStyleFuncLapAvgs(v => v.Con10LapRank, 1, 40, true)" />
                    <PropertyColumn Property="x => x.Con15LapRank" Title="15 lap"  CellStyleFunc="GetCellStyleFuncLapAvgs(v => v.Con15LapRank, 1, 40, true)" />
                        <PropertyColumn Property="x => x.Con20LapRank" Title="20 lap" CellStyleFunc="GetCellStyleFuncLapAvgs(v => v.Con20LapRank, 1, 40, true)" />

                </Columns>
            </MudDataGrid>
            </MudItem>
        }
</MudGrid>
}

@if(driverStats == null)
{
    <h2>Loading Historical Data</h2>
}
else
{
    <div style="padding-top: 2%">
        <MudDataGrid Items="@driverStats" Virtualize="true" Height="600px" FixedHeader="true" Dense="true" SortDefinitions="@initialSorts" Striped="true" Bordered="true" Hover="true" PageSize="20" EditMode="@DataGridEditMode.Cell">
        <ToolBarContent>
            @foreach (var track in tracks)
            {
                <MudChip Icon="@Icons.Material.Filled.Stadium" IconColor="Color.Primary">@track</MudChip>
            }
            @foreach (var raceSeason in years)
            {
                <MudChip Icon="@Icons.Material.Filled.SportsScore" IconColor="Color.Success">@raceSeason</MudChip>
            }
            <MudSpacer />
            <MudSwitch @bind-Checked="@colorFilter" Color="Color.Primary">Color Filter</MudSwitch>

        </ToolBarContent>
        <Columns>
            <HierarchyColumn T="@DriverAverageStats" />
            <PropertyColumn Property="x => x.DriverFullName" Title="Driver" />
            <PropertyColumn Property="x => Math.Round(x.AverageStartPosition, 1)"
                        CellStyleFunc="@GetCellStyleFunc(v => v.AverageStartPosition, minAvgStart, maxAvgStart, true)"
                        Title="Start" />
            <PropertyColumn Property="x => Math.Round(x.AveragePosition, 1)"
                        CellStyleFunc="@GetCellStyleFunc(v => v.AveragePosition, minAvgPosition, maxAvgPosition, true)"
                        Title="Average Position" />
            <PropertyColumn Property="x => Math.Round(x.AverageEndPosition, 1)"
                        CellStyleFunc="@GetCellStyleFunc(v => v.AverageEndPosition, minAvgFinish, maxAvgFinish, true)"
                        Title="Finish" />
            @*<PropertyColumn Property="x => Math.Round(x.AveragePasses, 1)"
                        CellStyleFunc="@GetCellStyleFunc(v => v.AveragePasses, minAvgPasses, maxAvgPasses, false)"
                        Title="Passes" />*@

            <PropertyColumn Property="x => x.WinFinishes"
                        CellStyleFunc="@GetCellStyleFunc(v => v.WinFinishes, minWinFinishes, maxWinFinishes, false)"
                        Title="Wins" />

            @*<PropertyColumn Property="x => x.Top3Finishes"
                        CellStyleFunc="@GetCellStyleFunc(v => v.Top3Finishes, minTop3Finishes, maxTop3Finishes, false)"
                        Title="Top 3" />*@

            <PropertyColumn Property="x => x.Top5Finishes"
                        CellStyleFunc="@GetCellStyleFunc(v => v.Top5Finishes, minTop5Finishes, maxTop5Finishes, false)"
                        Title="Top 5" />

            <PropertyColumn Property="x => x.Top10Finishes"
                        CellStyleFunc="@GetCellStyleFunc(v => v.Top10Finishes, minTop10Finishes, maxTop10Finishes, false)"
                        Title="Top 10" />

            @*<PropertyColumn Property="x => x.Top20Finishes"
                        CellStyleFunc="@GetCellStyleFunc(v => v.Top20Finishes, minTop20Finishes, maxTop20Finishes, false)"
                        Title="Top 20" />*@

            <PropertyColumn Property="x => Math.Round(x.AverageFastLaps, 1)"
                        CellStyleFunc="@GetCellStyleFunc(v => v.AverageFastLaps, minAverageFastLaps, maxAverageFastLaps, false)"
                        Title="Fast Laps" />

            <PropertyColumn Property="x => Math.Round(x.AverageLeadLaps, 1)"
                        CellStyleFunc="@GetCellStyleFunc(v => v.AverageLeadLaps, minAverageLeadLaps, maxAverageLeadLaps, false)"
                        Title="Lead Laps" />

            <PropertyColumn Property="x => Math.Round(x.AverageRating, 1)"
                        CellStyleFunc="@GetCellStyleFunc(v => v.AverageRating, minAverageRating, maxAverageRating, false)"
                        Title="Rating" />

            <PropertyColumn Property="x => x.SampleSize"
                        CellStyleFunc="@GetCellStyleFunc(v => v.SampleSize, minSampleSize, maxSampleSize, false)"
                        Title="Sample Size" />

        </Columns>
        <ChildRowContent>
            <MudDataGrid Dense="true" Items="@context.Item.RaceResults" ReadOnly="true" Hover="true">
                <Columns>
                    <PropertyColumn Property="x => x.TrackName" Title="Track Name" />
                    <PropertyColumn Property="x => x.RaceSeason" Title="Year" />
                    <PropertyColumn Property="x => x.StartPosition" Title="Start" />
                    <PropertyColumn Property="x => x.AveragePosition" Title="Avg Position" />
                    <PropertyColumn Property="x => x.EndPosition" Title="Finish" />
                    <PropertyColumn Property="x => x.FastLaps" Title="Fast Laps" />
                    <PropertyColumn Property="x => x.LeadLaps" Title="Lead Laps" />
                    <PropertyColumn Property="x => x.Rating" Title="Rating" />
                </Columns>
            </MudDataGrid>
        </ChildRowContent>
    </MudDataGrid>
    </div>
}

@code {
    [Parameter]
    public int year { get; set; }
    [Parameter]
    public int seriesId { get; set; }
    [Parameter]
    public int raceId { get; set; }

    LapAverages lapAverages;
    private List<DriverAverageStats>? driverStats;
    DateTime qualifyingTime;
    DateTime practiceTime;
    List<string> tracks;
    List<int> years;
    double minAvgStart;
    double maxAvgStart;
    double maxAvgPosition;
    double minAvgPosition;
    double minAvgFinish;
    double maxAvgFinish;
    double minAvgPasses;
    double maxAvgPasses;
    int minWinFinishes;
    int maxWinFinishes;
    int minTop3Finishes;
    int maxTop3Finishes;
    int minTop5Finishes;
    int maxTop5Finishes;
    int minTop10Finishes;
    int maxTop10Finishes;
    int minTop20Finishes;
    int maxTop20Finishes;
    double minAverageFastLaps;
    double maxAverageFastLaps;
    double minAverageLeadLaps;
    double maxAverageLeadLaps;
    double minAverageRating;
    double maxAverageRating;
    int minSampleSize;
    int maxSampleSize;
    private bool colorFilter;
    private bool colorFilterForLapAvgs;
    int nextRaceId;
    int previousRaceId;

    private RaceCenterViewModel raceCenterViewModel;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            raceCenterViewModel = await RaceCenterService.GetRaceCenter(year, seriesId, raceId); //Suggestion - Load one by one, One by one up top too
            lapAverages = await CacheService.GetLapAveragesAsync(year, seriesId, raceId);
            if(seriesId == 1)
            {
                qualifyingTime = raceCenterViewModel.raceListBasic.series_1
                                .Where(x => x.race_id == raceId)
                                .SelectMany(x => x.schedule)
                                .Where(x => x.run_type == 2)
                                .Select(x => x.start_time_utc)
                                .FirstOrDefault();
                practiceTime = raceCenterViewModel.raceListBasic.series_1
                                .Where(x => x.race_id == raceId)
                                .SelectMany(x => x.schedule)
                                .Where(x => x.run_type == 1)
                                .Select(x => x.start_time_utc)
                                .FirstOrDefault();

                nextRaceId = raceCenterViewModel.raceListBasic.series_1.Where(x => x.race_id > raceId).Select(x => x.race_id).FirstOrDefault();
                previousRaceId = raceCenterViewModel.raceListBasic.series_1
                                    .Where(x => x.race_id < raceId)
                                    .OrderByDescending(x => x.race_id)
                                    .Select(x => x.race_id)
                                    .FirstOrDefault();

            }
            else if(seriesId == 2)
            {
                qualifyingTime = raceCenterViewModel.raceListBasic.series_2
                                .Where(x => x.race_id == raceId)
                                .SelectMany(x => x.schedule)
                                .Where(x => x.run_type == 2)
                                .Select(x => x.start_time_utc)
                                .FirstOrDefault();
                practiceTime = raceCenterViewModel.raceListBasic.series_2
                                .Where(x => x.race_id == raceId)
                                .SelectMany(x => x.schedule)
                                .Where(x => x.run_type == 1)
                                .Select(x => x.start_time_utc)
                                .FirstOrDefault();
                nextRaceId = raceCenterViewModel.raceListBasic.series_2.Where(x => x.race_id > raceId).Select(x => x.race_id).FirstOrDefault();
                previousRaceId = raceCenterViewModel.raceListBasic.series_2
                                    .Where(x => x.race_id < raceId)
                                    .OrderByDescending(x => x.race_id)
                                    .Select(x => x.race_id)
                                    .FirstOrDefault();

            }
            else
            {
                qualifyingTime = raceCenterViewModel.raceListBasic.series_3
                                .Where(x => x.race_id == raceId)
                                .SelectMany(x => x.schedule)
                                .Where(x => x.run_type == 2)
                                .Select(x => x.start_time_utc)
                                .FirstOrDefault();
                practiceTime = raceCenterViewModel.raceListBasic.series_3
                                .Where(x => x.race_id == raceId)
                                .SelectMany(x => x.schedule)
                                .Where(x => x.run_type == 1)
                                .Select(x => x.start_time_utc)
                                .FirstOrDefault();

                nextRaceId = raceCenterViewModel.raceListBasic.series_3.Where(x => x.race_id > raceId).Select(x => x.race_id).FirstOrDefault();
                previousRaceId = raceCenterViewModel.raceListBasic.series_3
                                    .Where(x => x.race_id < raceId)
                                    .OrderByDescending(x => x.race_id)
                                    .Select(x => x.race_id)
                                    .FirstOrDefault();

            }

            years = new List<int> { 2018, 2019, 2020, 2021, 2022, 2023 };
            tracks = new List<string> { raceCenterViewModel.trackInfo.TrackName };

            driverStats = await DriverService.GetDriverAverageStats(years, seriesId, tracks);

            minAvgStart = driverStats.Min(e => e.AverageStartPosition);
            maxAvgStart = driverStats.Max(e => e.AverageStartPosition);

            minAvgPosition = driverStats.Min(e => e.AveragePosition);
            maxAvgPosition = driverStats.Max(e => e.AveragePosition);

            minAvgFinish = driverStats.Min(e => e.AverageEndPosition);
            maxAvgFinish = driverStats.Max(e => e.AverageEndPosition);

            minAvgPasses = driverStats.Min(x => x.AveragePasses);
            maxAvgPasses = driverStats.Max(x => x.AveragePasses);

            minWinFinishes = driverStats.Min(x => x.WinFinishes);
            maxWinFinishes = driverStats.Max(x => x.WinFinishes);

            minTop3Finishes = driverStats.Min(x => x.Top3Finishes);
            maxTop3Finishes = driverStats.Max(x => x.Top3Finishes);

            minTop5Finishes = driverStats.Min(x => x.Top5Finishes);
            maxTop5Finishes = driverStats.Max(x => x.Top5Finishes);

            minTop10Finishes = driverStats.Min(x => x.Top10Finishes);
            maxTop10Finishes = driverStats.Max(x => x.Top10Finishes);

            minTop20Finishes = driverStats.Min(x => x.Top20Finishes);
            maxTop20Finishes = driverStats.Max(x => x.Top20Finishes);

            minAverageFastLaps = driverStats.Min(x => x.AverageFastLaps);
            maxAverageFastLaps = driverStats.Max(x => x.AverageFastLaps);

            minAverageLeadLaps = driverStats.Min(x => x.AverageLeadLaps);
            maxAverageLeadLaps = driverStats.Max(x => x.AverageLeadLaps);

            minAverageRating = driverStats.Min(x => x.AverageRating);
            maxAverageRating = driverStats.Max(x => x.AverageRating);

            minSampleSize = driverStats.Min(x => x.SampleSize);
            maxSampleSize = driverStats.Max(x => x.SampleSize);

            colorFilterForLapAvgs = true;
            colorFilter = true;

            

        }
        catch (Exception e)
        {
            Console.WriteLine($"Request failed: {e.Message}");
        }

    }

    private Func<Schedule, string> _cellStyleFunc => x =>
    {
        string style = "";

        if (x.run_type == 1)
            style += "background-color:#8CED8C";

        else if (x.run_type == 2)
            style += "background-color:#E5BDE5";

        else if (x.run_type == 3)
            style += "background-color:#EACE5D";


        return style;
    };

    // Style the cells according to the values.
    private Func<DriverAverageStats, string> GetCellStyleFunc(
        Func<DriverAverageStats, double> valueSelector,
        double minValue,
        double maxValue,
        bool isGreenLow) => x =>
    {
        string color = GetColor(valueSelector(x), minValue, maxValue, isGreenLow);
        string style;
        if (ThemeService.IsDarkMode)
        {
            style = $"background-color:{color}; color: black;";
        }
        else
        {
            style = $"background-color:{color};";
        }

        if (colorFilter == true)
        {

        }
        else
        {
            style = "";
        }

        return style;
    };

    public string GetColor(double value, double minValue, double maxValue, bool isRedLow)
    {
        if (value == 0)
        {
            return "white";
        }
        double ratio;
        if (isRedLow)
        {
            ratio = (value - minValue) / (maxValue - minValue);
        }
        else
        {
            ratio = (maxValue - value) / (maxValue - minValue);
        }

        var h = 120 - (int)(120 * ratio); // interpolating hue from 0 (red) to 120 (green)
        const int s = 100; // saturation is always 100
        const int l = 50; // lightness is always 50

        return $"hsl({h},{s}%,{l}%)";
    }

    // Style the cells according to the values.
    private Func<Item, string> GetCellStyleFuncLapAvgs(
        Func<Item, int?> valueSelector, // change here
        int minValue,
        int maxValue,
        bool isGreenLow) => x =>
    {
        string color = GetColorLapAvgs(valueSelector(x), minValue, maxValue, isGreenLow);
        string style;
        if (ThemeService.IsDarkMode)
        {
            style = $"background-color:{color}; color: black;";
        }
        else
        {
            style = $"background-color:{color};";
        }

        if (colorFilterForLapAvgs == true)
        {

        }
        else
        {
            style = "";
        }

        return style;
    };

    public string GetColorLapAvgs(int? value, int minValue, int maxValue, bool isRedLow)
    {
        // Check if value is null
        if (!value.HasValue)
        {
            // If it's null, return a default color, for example.
            // Modify this as per your requirements.
            return "grey";
        }

        double ratio;
        if (isRedLow)
        {
            ratio = (value.Value - minValue) / (double)(maxValue - minValue);
        }
        else
        {
            ratio = (maxValue - value.Value) / (double)(maxValue - minValue);
        }

        var h = 120 - (int)(120 * ratio); // interpolating hue from 0 (red) to 120 (green)
        const int s = 100; // saturation is always 100
        const int l = 50; // lightness is always 50

        return $"hsl({h},{s}%,{l}%)";
    }

    Dictionary<string, SortDefinition<DriverAverageStats>> initialSorts = new Dictionary<string, SortDefinition<DriverAverageStats>>
    {
        {
            "Sample",
            new SortDefinition<DriverAverageStats>("Sample", true, 1, item => item.SampleSize)
        },
        {
            "Rating",
            new SortDefinition<DriverAverageStats>("Rating", true, 2, item => item.AverageRating)
        }
    };

    private void NavigateToRaceCenter(int yearParam, int seriesParam, int raceParam)
    {
        int year = yearParam;  // Replace with actual value
        int seriesId = seriesParam;  // Replace with actual value
        int raceId = raceParam;  // Replace with actual value

        string url = $"/racecenter/{year}/{seriesId}/{raceId}";
        NavigationManager.NavigateTo(url, forceLoad: true);
    }
    
}
