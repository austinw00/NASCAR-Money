@page "/driverstatsresults"
@inject NavigationManager NavigationManager
@inject NASCAR_Money.Services.IDriverService DriverService
@inject NASCAR_Money.Helpers.IDriversHelper DriverHelper
@using NASCAR_Money.Models;
@using NASCAR_Money.DbModels;

@if (driverStats == null && driverWithHighestAvgRating == null && driverWithHighestAvgStart == null && driverWithHighestAvgPosition == null && driverWithHighestAvgFinish == null)
{
    <p>Loading...</p>
}
else
{
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Class="d-flex align-center justify-center mud-width-full py-8"><h1>Driver Average Stats</h1></MudPaper>
        </MudItem>
        <MudItem xs="6">
                <MudPaper Class="pa-4" Elevation="3">
                    <MudChart ChartType="ChartType.Donut" Width="300px" Height="300px" @bind-SelectedIndex="Index" InputData="@data" InputLabels="@labels" LegendPosition="Position.Left"></MudChart>
                </MudPaper>
        </MudItem>
        <MudItem xs="6">
                <MudPaper Class="pa-4" Elevation="3">
                    <MudChart ChartType="ChartType.Donut" Width="300px" Height="300px" @bind-SelectedIndex="Index" InputData="@data" InputLabels="@labels" LegendPosition="Position.Left"></MudChart>
                </MudPaper>
        </MudItem>
        <MudItem xs="3">
            <MudCard>
                <MudCardHeader>
                    <MudImage ObjectPosition="ObjectPosition.Top" Src="@driverWithHighestAvgStart.Firesuit_Image" Height="300" />
                    <MudImage ObjectPosition="ObjectPosition.Top" Src="@driverWithHighestAvgStart.Manufacturer" Height="120" />

                </MudCardHeader>
                <MudCardContent>
                    <MudText Typo="Typo.h5">Highest Average Start</MudText>
                    <MudText Typo="Typo.body2">@driverWithHighestAvgStart.Full_Name</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Text" Color="Color.Primary">Driver Info</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="3">
            <MudCard>
                <MudCardHeader>
                    <MudImage ObjectPosition="ObjectPosition.Top" Src="@driverWithHighestAvgPosition.Firesuit_Image" Height="300" />
                    <MudImage ObjectPosition="ObjectPosition.Top" Src="@driverWithHighestAvgPosition.Manufacturer" Height="120" />

                </MudCardHeader>
                <MudCardContent>
                    <MudText Typo="Typo.h5">Highest Average Running Position</MudText>
                    <MudText Typo="Typo.body2">@driverWithHighestAvgPosition.Full_Name</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Text" Color="Color.Primary">Driver Info</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="3">
            <MudCard>
                <MudCardHeader>
                    <MudImage ObjectPosition="ObjectPosition.Top" Src="@driverWithHighestAvgFinish.Firesuit_Image" Height="300" />
                    <MudImage ObjectPosition="ObjectPosition.Top" Src="@driverWithHighestAvgFinish.Manufacturer" Height="120" />

                </MudCardHeader>
                <MudCardContent>
                    <MudText Typo="Typo.h5">Highest Average Finish</MudText>
                    <MudText Typo="Typo.body2">@driverWithHighestAvgFinish.Full_Name</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Text" Color="Color.Primary">Driver Info</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="3">
            <MudCard>
                <MudCardHeader>
                    <MudImage ObjectPosition="ObjectPosition.Top" Src="@driverWithHighestAvgRating.Firesuit_Image" Height="300" />
                    <MudImage ObjectPosition="ObjectPosition.Top" Src="@driverWithHighestAvgRating.Manufacturer" Height="120" />

                </MudCardHeader>
                <MudCardContent>
                    <MudText Typo="Typo.h5">Highest Average Rating</MudText>
                    <MudText Typo="Typo.body2">@driverWithHighestAvgRating.Full_Name</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Text" Color="Color.Primary">Driver Info</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
    
    

    <div style="padding-top: 5%">
        <MudPaper Elevation="3">
            <MudDataGrid Items="@driverStats" Dense="true" Striped="true" Bordered="true" Hover="true" PageSize="20" EditMode="@DataGridEditMode.Cell">
                <ToolBarContent>
                    @foreach (var track in trackNames)
                    {
                        <MudChip Icon="@Icons.Material.Filled.Stadium" IconColor="Color.Primary">@track</MudChip>
                    }
                        @foreach (var raceSeason in raceSeasons)
                        {
                            <MudChip Icon="@Icons.Material.Filled.SportsScore" IconColor="Color.Success">@raceSeason</MudChip>
                        }
                    
                </ToolBarContent>
                <Columns>
                    <HierarchyColumn T="@DriverAverageStats"/>
                    <PropertyColumn Property="x => x.DriverFullName" Title="Driver" />
                    <PropertyColumn Property="x => Math.Round(x.AverageStartPosition.Value, 1)" Title="Start" />
                    <PropertyColumn Property="x => Math.Round(x.AveragePosition.Value, 1)" Title="Average Position" />
                    <PropertyColumn Property="x => Math.Round(x.AverageEndPosition.Value, 1)" Title="Finish" />
                    <PropertyColumn Property="x => Math.Round(x.AveragePasses.Value, 1)" Title="Passes" />
                    <PropertyColumn Property="x => x.WinFinishes.Value" Title="Wins" />
                    <PropertyColumn Property="x => x.Top3Finishes.Value" Title="Top 3" />
                    <PropertyColumn Property="x => x.Top5Finishes.Value" Title="Top 5" />
                    <PropertyColumn Property="x => x.Top10Finishes.Value" Title="Top 10" />
                    <PropertyColumn Property="x => x.Top20Finishes.Value" Title="Top 20" />
                    <PropertyColumn Property="x => Math.Round(x.AverageFastLaps.Value, 1)" Title="Fast Laps" />
                    <PropertyColumn Property="x => Math.Round(x.AverageLeadLaps.Value, 1)" Title="Lead Laps" />
                    <PropertyColumn Property="x => Math.Round(x.AverageRating.Value, 1)" Title="Rating" />
                    <PropertyColumn Property="x => x.SampleSize.Value" Title="Sample Size" />
                </Columns>
                <ChildRowContent>
                    <MudDataGrid Dense="true" Items="@context.Item.RaceResults" ReadOnly="true" Hover="true">
                                <Columns>
                                    <PropertyColumn Property="x => x.TrackName" Title="Track Name" />
                                    <PropertyColumn Property="x => x.RaceSeason" Title="Year" />
                                    <PropertyColumn Property="x => x.StartPosition" Title="Start" />
                                    <PropertyColumn Property="x => x.AveragePosition" Title="Avg Position" />
                                    <PropertyColumn Property="x => x.EndPosition" Title="Finish" />
                                    <PropertyColumn Property="x => x.FastLaps" Title="Fast Laps" />
                                    <PropertyColumn Property="x => x.LeadLaps" Title="Lead Laps" />
                                    <PropertyColumn Property="x => x.Rating" Title="Rating" />
                                </Columns>
                            </MudDataGrid>
                </ChildRowContent>
            </MudDataGrid>
        </MudPaper>
        
    </div>


}

@code {
    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
    private string[] labels;
    private double[] data;
    private string? driverFullName;
    private int? seriesId;
    private List<int> raceSeasons = new List<int>();
    private List<string> trackNames = new List<string>();
    private List<DriverAverageStats>? driverStats;
    private DriverData driverWithHighestAvgRating { get; set; }
    private DriverData driverWithHighestAvgFinish { get; set; }
    private DriverData driverWithHighestAvgPosition { get; set; }
    private DriverData driverWithHighestAvgStart { get; set; }


    private List<Models.DriverData> driversList;


    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(NavigationManager.Uri);

        // Parse the query string
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        // Retrieve the parameters
        seriesId = query["seriesId"] != null ? int.Parse(query["seriesId"]) : (int?)null;
        raceSeasons = query["raceSeasons"]?.Split(',').Select(int.Parse).ToList() ?? new List<int>();
        trackNames = query["trackNames"]?.Split(',').ToList() ?? new List<string>();

        // Parse track weights
        var trackWeightPairs = query["trackWeights"]?.Split(',') ?? new string[0];
        var trackWeights = new Dictionary<string, double>();
        foreach (var pair in trackWeightPairs)
        {
            var parts = pair.Split(':');
            if (parts.Length == 2 && double.TryParse(parts[1], out var weight))
            {
                trackWeights[parts[0]] = weight;
            }
        }

        labels = trackNames.ToArray();
        data = trackWeights.Values.Take(labels.Count()).ToArray();

        // Now fetch the stats using these parameters
        driverStats = await DriverService.GetDriverAverageStats(raceSeasons, seriesId, trackNames, trackWeights);

        driversList = await DriverHelper.GetDriversList();

        var highestAvgDriverRating = driverStats.OrderByDescending(x => x.AverageRating).FirstOrDefault();
        driverWithHighestAvgRating = driversList.Where(x => x.Full_Name == highestAvgDriverRating.DriverFullName).FirstOrDefault();

        var highestAvgDriverStart = driverStats.OrderBy(x => x.AverageStartPosition).FirstOrDefault();
        driverWithHighestAvgStart = driversList.Where(x => x.Full_Name == highestAvgDriverStart.DriverFullName).FirstOrDefault();

        var highestAvgDriverPosition = driverStats.OrderBy(x => x.AveragePosition).FirstOrDefault();
        driverWithHighestAvgPosition = driversList.Where(x => x.Full_Name == highestAvgDriverPosition.DriverFullName).FirstOrDefault();

        var highestAvgDriverFinish = driverStats.OrderBy(x => x.AverageEndPosition).FirstOrDefault();
        driverWithHighestAvgFinish = driversList.Where(x => x.Full_Name == highestAvgDriverFinish.DriverFullName).FirstOrDefault();
    }

}
