@page "/driverstatsresults"
@inject NavigationManager NavigationManager
@inject NASCAR_Money.Services.IDriverService DriverService
@inject NASCAR_Money.Helpers.IDriversHelper DriverHelper
@inject NASCAR_Money.Services.ThemeService ThemeService
@using NASCAR_Money.Models;
@using NASCAR_Money.DbModels;

@if (driverStats == null && driverWithHighestAvgRating == null && driverWithHighestAvgStart == null && driverWithHighestAvgPosition == null && driverWithHighestAvgFinish == null)
{
    <p>Loading...</p>
}
else
{
    <MudGrid Spacing="7">
        <MudItem xs="12">
            <MudPaper Class="d-flex align-center justify-center mud-width-full py-8"><h1>Money Dashboard</h1></MudPaper>
        </MudItem>
        <MudItem xs="4">
            <MudPaper Class="pa-4" Elevation="3">
                <MudChart ChartType="ChartType.Donut" Width="300px" Height="300px" @bind-SelectedIndex="Index" InputData="@data" InputLabels="@labels" LegendPosition="Position.Left"></MudChart>
            </MudPaper>
        </MudItem>
        <MudItem xs="4">
            @* <MudPaper Class="pa-4" Elevation="3">
        <MudChart ChartType="ChartType.Donut" Width="300px" Height="300px" @bind-SelectedIndex="Index" InputData="@data" InputLabels="@labels" LegendPosition="Position.Left"></MudChart>
        </MudPaper>*@
        </MudItem>
        <MudItem xs="4">
            <MudPaper Width="300px">
                <MudList>
                    <MudText Typo="Typo.h6" Class="px-4">NASCAR Odds</MudText>
                    <MudListItem>
                        <MudNavLink Href="https://sportsbook.draftkings.com/leagues/motorsports/nascar-cup-series" Target="_blank">
                            DraftKings
                        </MudNavLink>
                    </MudListItem>
                    <MudListItem>
                        <MudNavLink Href="https://www.barstoolsportsbook.com/sports/motorsports/nascar" Target="_blank">
                            Barstool
                        </MudNavLink>
                    </MudListItem>
                    <MudListItem>
                        <MudNavLink Href="https://sportsbook.fanduel.com/motorsport" Target="_blank">
                            Fanduel
                        </MudNavLink>
                    </MudListItem>
                    <MudListItem>
                        <MudNavLink Href="https://www.bovada.lv/sports/motor-sports" Target="_blank">
                            Bovada
                        </MudNavLink>
                    </MudListItem>
                </MudList>
            </MudPaper>
        </MudItem>

        <MudItem xs="3">
            <MudCard>
                <MudCardHeader Class="center-images">
                    <MudImage ObjectPosition="ObjectPosition.Top" Src="@driverWithHighestAvgStart.Firesuit_Image" Height="150" />
                    <MudImage ObjectPosition="ObjectPosition.Top" Src="@driverWithHighestAvgStart.Badge_Image" Height="150" />

                </MudCardHeader>
                <MudCardContent>
                    <MudText Typo="Typo.h5">Highest Average Start</MudText>
                    <MudText Typo="Typo.body2">@driverWithHighestAvgStart.Full_Name</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Text" Color="Color.Primary" Href="@($"/driver/{driverWithHighestAvgStart.Driver_ID}/{driverWithHighestAvgStart.Nascar_Driver_ID}")">Driver Info</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="3">
            <MudCard>
                <MudCardHeader Class="center-images">
                    <MudImage ObjectPosition="ObjectPosition.Top" Src="@driverWithHighestAvgPosition.Firesuit_Image" Height="150" />
                    <MudImage ObjectPosition="ObjectPosition.Top" Src="@driverWithHighestAvgPosition.Badge_Image" Height="150" />

                </MudCardHeader>
                <MudCardContent>
                    <MudText Typo="Typo.h5">Highest Average Running Position</MudText>
                    <MudText Typo="Typo.body2">@driverWithHighestAvgPosition.Full_Name</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Text" Color="Color.Primary" Href="@($"/driver/{driverWithHighestAvgPosition.Driver_ID}/{driverWithHighestAvgPosition.Nascar_Driver_ID}")">Driver Info</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="3">
            <MudCard>
                <MudCardHeader Class="center-images">
                    <MudImage ObjectPosition="ObjectPosition.Top" Src="@driverWithHighestAvgFinish.Firesuit_Image" Height="150" />
                    <MudImage ObjectPosition="ObjectPosition.Top" Src="@driverWithHighestAvgFinish.Badge_Image" Height="150" />

                </MudCardHeader>
                <MudCardContent>
                    <MudText Typo="Typo.h5">Highest Average Finish</MudText>
                    <MudText Typo="Typo.body2">@driverWithHighestAvgFinish.Full_Name</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Text" Color="Color.Primary" Href="@($"/driver/{driverWithHighestAvgFinish.Driver_ID}/{driverWithHighestAvgFinish.Nascar_Driver_ID}")">Driver Info</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="3">
            <MudCard>
                <MudCardHeader Class="center-images">
                    <MudImage ObjectPosition="ObjectPosition.Top" Src="@driverWithHighestAvgRating.Firesuit_Image" Height="150" />
                    <MudImage ObjectPosition="ObjectPosition.Top" Src="@driverWithHighestAvgRating.Badge_Image" Height="150" />

                </MudCardHeader>
                <MudCardContent>
                    <MudText Typo="Typo.h5">Highest Average Rating</MudText>
                    <MudText Typo="Typo.body2">@driverWithHighestAvgRating.Full_Name</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Text" Color="Color.Primary" Href="@($"/driver/{driverWithHighestAvgRating.Driver_ID}/{driverWithHighestAvgRating.Nascar_Driver_ID}")">Driver Info</MudButton>
                </MudCardActions>

            </MudCard>
        </MudItem>
    </MudGrid>

    <div style="padding-top: 2%">
        <MudPaper Elevation="3">
            <MudDataGrid Items="@driverStats" Dense="true" Striped="true" Bordered="true" Hover="true" PageSize="20" EditMode="@DataGridEditMode.Cell">
                <ToolBarContent>
                    @foreach (var track in trackNames)
                    {
                        <MudChip Icon="@Icons.Material.Filled.Stadium" IconColor="Color.Primary">@track</MudChip>
                    }
                    @foreach (var raceSeason in raceSeasons)
                    {
                        <MudChip Icon="@Icons.Material.Filled.SportsScore" IconColor="Color.Success">@raceSeason</MudChip>
                    }
                    <MudSpacer />
                    <MudSwitch @bind-Checked="@colorFilter" Color="Color.Primary">Color Filter</MudSwitch>

                </ToolBarContent>
                <Columns>
                    <HierarchyColumn T="@DriverAverageStats" />
                    <PropertyColumn Property="x => x.DriverFullName" Title="Driver" />
                    <PropertyColumn Property="x => Math.Round(x.AverageStartPosition, 1)"
                                CellStyleFunc="@GetCellStyleFunc(v => v.AverageStartPosition, minAvgStart, maxAvgStart, true)"
                                Title="Start" />
                    <PropertyColumn Property="x => Math.Round(x.AveragePosition, 1)"
                                CellStyleFunc="@GetCellStyleFunc(v => v.AveragePosition, minAvgPosition, maxAvgPosition, true)"
                                Title="Average Position" />
                    <PropertyColumn Property="x => Math.Round(x.AverageEndPosition, 1)"
                                CellStyleFunc="@GetCellStyleFunc(v => v.AverageEndPosition, minAvgFinish, maxAvgFinish, true)"
                                Title="Finish" />
                    <PropertyColumn Property="x => Math.Round(x.AveragePasses, 1)"
                                CellStyleFunc="@GetCellStyleFunc(v => v.AveragePasses, minAvgPasses, maxAvgPasses, false)"
                                Title="Passes" />

                    <PropertyColumn Property="x => x.WinFinishes"
                                CellStyleFunc="@GetCellStyleFunc(v => v.WinFinishes, minWinFinishes, maxWinFinishes, false)"
                                Title="Wins" />

                    <PropertyColumn Property="x => x.Top3Finishes"
                                CellStyleFunc="@GetCellStyleFunc(v => v.Top3Finishes, minTop3Finishes, maxTop3Finishes, false)"
                                Title="Top 3" />

                    <PropertyColumn Property="x => x.Top5Finishes"
                                CellStyleFunc="@GetCellStyleFunc(v => v.Top5Finishes, minTop5Finishes, maxTop5Finishes, false)"
                                Title="Top 5" />

                    <PropertyColumn Property="x => x.Top10Finishes"
                                CellStyleFunc="@GetCellStyleFunc(v => v.Top10Finishes, minTop10Finishes, maxTop10Finishes, false)"
                                Title="Top 10" />

                    <PropertyColumn Property="x => x.Top20Finishes"
                                CellStyleFunc="@GetCellStyleFunc(v => v.Top20Finishes, minTop20Finishes, maxTop20Finishes, false)"
                                Title="Top 20" />

                    <PropertyColumn Property="x => Math.Round(x.AverageFastLaps, 1)"
                                CellStyleFunc="@GetCellStyleFunc(v => v.AverageFastLaps, minAverageFastLaps, maxAverageFastLaps, false)"
                                Title="Fast Laps" />

                    <PropertyColumn Property="x => Math.Round(x.AverageLeadLaps, 1)"
                                CellStyleFunc="@GetCellStyleFunc(v => v.AverageLeadLaps, minAverageLeadLaps, maxAverageLeadLaps, false)"
                                Title="Lead Laps" />

                    <PropertyColumn Property="x => Math.Round(x.AverageRating, 1)"
                                CellStyleFunc="@GetCellStyleFunc(v => v.AverageRating, minAverageRating, maxAverageRating, false)"
                                Title="Rating" />

                    <PropertyColumn Property="x => x.SampleSize"
                                CellStyleFunc="@GetCellStyleFunc(v => v.SampleSize, minSampleSize, maxSampleSize, false)"
                                Title="Sample Size" />

                </Columns>
                <ChildRowContent>
                    <MudDataGrid Dense="true" Items="@context.Item.RaceResults" ReadOnly="true" Hover="true">
                        <Columns>
                            <PropertyColumn Property="x => x.TrackName" Title="Track Name" />
                            <PropertyColumn Property="x => x.RaceSeason" Title="Year" />
                            <PropertyColumn Property="x => x.StartPosition" Title="Start" />
                            <PropertyColumn Property="x => x.AveragePosition" Title="Avg Position" />
                            <PropertyColumn Property="x => x.EndPosition" Title="Finish" />
                            <PropertyColumn Property="x => x.FastLaps" Title="Fast Laps" />
                            <PropertyColumn Property="x => x.LeadLaps" Title="Lead Laps" />
                            <PropertyColumn Property="x => x.Rating" Title="Rating" />
                        </Columns>
                    </MudDataGrid>
                </ChildRowContent>
            </MudDataGrid>
        </MudPaper>

    </div>


}
<style>
    .center-images {
        display: flex;
        justify-content: center;
        align-items: center;
    }
</style>

@code {
    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
    private string[] labels;
    private double[] data;
    private string? driverFullName;
    private int? seriesId;
    private List<int> raceSeasons = new List<int>();
    private List<string> trackNames = new List<string>();
    private List<DriverAverageStats>? driverStats;
    private DriverData driverWithHighestAvgRating { get; set; }
    private DriverData driverWithHighestAvgFinish { get; set; }
    private DriverData driverWithHighestAvgPosition { get; set; }
    private DriverData driverWithHighestAvgStart { get; set; }
    double minAvgStart;
    double maxAvgStart;
    double maxAvgPosition;
    double minAvgPosition;
    double minAvgFinish;
    double maxAvgFinish;
    double minAvgPasses;
    double maxAvgPasses;
    int minWinFinishes;
    int maxWinFinishes;
    int minTop3Finishes;
    int maxTop3Finishes;
    int minTop5Finishes;
    int maxTop5Finishes;
    int minTop10Finishes;
    int maxTop10Finishes;
    int minTop20Finishes;
    int maxTop20Finishes;
    double minAverageFastLaps;
    double maxAverageFastLaps;
    double minAverageLeadLaps;
    double maxAverageLeadLaps;
    double minAverageRating;
    double maxAverageRating;
    int minSampleSize;
    int maxSampleSize;
    private bool colorFilter;


    private List<Models.DriverData> driversList;


    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(NavigationManager.Uri);

        // Parse the query string
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        // Retrieve the parameters
        seriesId = query["seriesId"] != null ? int.Parse(query["seriesId"]) : (int?)null;
        raceSeasons = query["raceSeasons"]?.Split(',').Select(int.Parse).ToList() ?? new List<int>();
        trackNames = query["trackNames"]?.Split(',').ToList() ?? new List<string>();

        // Parse track weights
        var trackWeightPairs = query["trackWeights"]?.Split(',') ?? new string[0];
        var trackWeights = new Dictionary<string, double>();
        foreach (var pair in trackWeightPairs)
        {
            var parts = pair.Split(':');
            if (parts.Length == 2 && double.TryParse(parts[1], out var weight))
            {
                trackWeights[parts[0]] = weight;
            }
        }

        labels = trackNames.ToArray();
        labels = trackNames.ToArray();

        // Extract weights where the track name is in labels
        List<double> datas = new List<double>();
        foreach (var label in labels)
        {
            if (trackWeights.TryGetValue(label, out double weight))
            {
                datas.Add(weight);
            }
        }

        // Convert list to array if necessary
        data = datas.ToArray();

        // Now fetch the stats using these parameters
        driverStats = await DriverService.GetDriverAverageStats(raceSeasons, seriesId, trackNames, trackWeights);

        driversList = await DriverHelper.GetDriversList();

        var highestAvgDriverRating = driverStats.OrderByDescending(x => x.AverageRating).FirstOrDefault();
        driverWithHighestAvgRating = driversList.Where(x => x.Full_Name == highestAvgDriverRating.DriverFullName).FirstOrDefault();

        var highestAvgDriverStart = driverStats.OrderBy(x => x.AverageStartPosition).FirstOrDefault();
        driverWithHighestAvgStart = driversList.Where(x => x.Full_Name == highestAvgDriverStart.DriverFullName).FirstOrDefault();

        var highestAvgDriverPosition = driverStats.OrderBy(x => x.AveragePosition).FirstOrDefault();
        driverWithHighestAvgPosition = driversList.Where(x => x.Full_Name == highestAvgDriverPosition.DriverFullName).FirstOrDefault();

        var highestAvgDriverFinish = driverStats.OrderBy(x => x.AverageEndPosition).FirstOrDefault();
        driverWithHighestAvgFinish = driversList.Where(x => x.Full_Name == highestAvgDriverFinish.DriverFullName).FirstOrDefault();

        minAvgStart = driverStats.Min(e => e.AverageStartPosition);
        maxAvgStart = driverStats.Max(e => e.AverageStartPosition);

        minAvgPosition = driverStats.Min(e => e.AveragePosition);
        maxAvgPosition = driverStats.Max(e => e.AveragePosition);

        minAvgFinish = driverStats.Min(e => e.AverageEndPosition);
        maxAvgFinish = driverStats.Max(e => e.AverageEndPosition);

        minAvgPasses = driverStats.Min(x => x.AveragePasses);
        maxAvgPasses = driverStats.Max(x => x.AveragePasses);

        minWinFinishes = driverStats.Min(x => x.WinFinishes);
        maxWinFinishes = driverStats.Max(x => x.WinFinishes);

        minTop3Finishes = driverStats.Min(x => x.Top3Finishes);
        maxTop3Finishes = driverStats.Max(x => x.Top3Finishes);

        minTop5Finishes = driverStats.Min(x => x.Top5Finishes);
        maxTop5Finishes = driverStats.Max(x => x.Top5Finishes);

        minTop10Finishes = driverStats.Min(x => x.Top10Finishes);
        maxTop10Finishes = driverStats.Max(x => x.Top10Finishes);

        minTop20Finishes = driverStats.Min(x => x.Top20Finishes);
        maxTop20Finishes = driverStats.Max(x => x.Top20Finishes);

        minAverageFastLaps = driverStats.Min(x => x.AverageFastLaps);
        maxAverageFastLaps = driverStats.Max(x => x.AverageFastLaps);

        minAverageLeadLaps = driverStats.Min(x => x.AverageLeadLaps);
        maxAverageLeadLaps = driverStats.Max(x => x.AverageLeadLaps);

        minAverageRating = driverStats.Min(x => x.AverageRating);
        maxAverageRating = driverStats.Max(x => x.AverageRating);

        minSampleSize = driverStats.Min(x => x.SampleSize);
        maxSampleSize = driverStats.Max(x => x.SampleSize);


    }

    // Style the cells according to the values.
    private Func<DriverAverageStats, string> GetCellStyleFunc(
        Func<DriverAverageStats, double> valueSelector,
        double minValue,
        double maxValue,
        bool isGreenLow) => x =>
    {
        string color = GetColor(valueSelector(x), minValue, maxValue, isGreenLow);
        string style;
        if (ThemeService.IsDarkMode)
        {
            style = $"background-color:{color}; color: black;";
        }
        else
        {
            style = $"background-color:{color};";
        }

        if (colorFilter == true)
        {

        }
        else
        {
            style = "";
        }

        return style;
    };

    public string GetColor(double value, double minValue, double maxValue, bool isRedLow)
    {
        double ratio;
        if (isRedLow)
        {
            ratio = (value - minValue) / (maxValue - minValue);
        }
        else
        {
            ratio = (maxValue - value) / (maxValue - minValue);
        }

        var h = 120 - (int)(120 * ratio); // interpolating hue from 0 (red) to 120 (green)
        const int s = 100; // saturation is always 100
        const int l = 50; // lightness is always 50

        return $"hsl({h},{s}%,{l}%)";
    }








}
